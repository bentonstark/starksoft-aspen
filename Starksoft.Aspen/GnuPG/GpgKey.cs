/*
* Copyright (c) 2015 Benton Stark
* This file is part of the Starksoft Aspen library.
*
* Starksoft Aspen is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* Starksoft Aspen is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Starksoft Aspen.  If not, see <http://www.gnu.org/licenses/>.
*   
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;

namespace Starksoft.Aspen.GnuPG
{
    /// <summary>
    /// Class structure that proves a read-only view of the GnuPG keys. 
    /// </summary>
    public class GpgKey
    {
        private string _key;
        private DateTime _keyExpiration;
        private string _userId;
        private string _userName;
        private string _subKey;
        private DateTime _subKeyExpiration;
        private string _raw;

        /// <summary>
        /// GnuPGKey constructor.
        /// </summary>
        /// <param name="raw">Raw output stream text data containing key information.</param>
        public GpgKey(string raw)
        {
            _raw = raw;
            ParseRaw();          
        }

        /// <summary>
        /// Key text information.
        /// </summary>
        public string Key
        {
            get { return _key; }
        }

        /// <summary>
        /// Key expiration date and time.
        /// </summary>
        public DateTime KeyExpiration
        {
            get { return _keyExpiration; }
        }

        /// <summary>
        /// Key user identification.
        /// </summary>
        public string UserId
        {
            get { return _userId; }
        }

        /// <summary>
        /// Key user name.
        /// </summary>
        public string UserName
        {
            get { return _userName; }
        }

        /// <summary>
        /// Sub-key information.
        /// </summary>
        public string SubKey
        {
            get { return _subKey; }
        }

        /// <summary>
        /// Sub-key expiration data and time.
        /// </summary>
        public DateTime SubKeyExpiration
        {
            get { return _subKeyExpiration; }
        }

        /// <summary>
        /// Raw output key text generated by GPG.EXE.
        /// </summary>
        public string Raw
        {
            get { return _raw; }
        }

        //sec   1024D/543C3595 2006-12-10
        //uid                  Benton Stark <benton@starksoft.com>
        //uid       ...
        //ssb   1024g/42A71AD8 2006-12-10
        //
        //pub   1024D/543C3595 2006-12-10
        //uid                  Benton Stark <benton@starksoft.com>
        //uid       ...
        //uid       ...
        //sub   1024g/42A71AD8 2006-12-10   
        //
        //pub   1024D/543C3595 2006-12-10
        //uid                  Benton Stark <benton@starksoft.com>
        //uid       ...
        
        private void ParseRaw()
        {
            string[] lines = _raw.Split(new char[] { '\r', '\n' }, 
                            StringSplitOptions.RemoveEmptyEntries);

            string[] pub = SplitSpaces(lines[0]);
            string uid = lines[1];
            string[] sub = SplitSpaces(lines[2]);
                        
            _key = pub[1];
            _keyExpiration = DateTime.Parse(pub[2]);
            _subKey = sub[1];
            _subKeyExpiration = DateTime.Parse(sub[2]);

            ParseUid(uid);
        }

        private string[] SplitSpaces(string input)
        {
            char[] splitChar = { ' '};
            return input.Split(splitChar, StringSplitOptions.RemoveEmptyEntries);
        }

     
        private void ParseUid(string uid)
        {
            Regex name = new Regex(@"(?<=uid).*(?=<)");
            Regex userId = new Regex(@"(?<=<).*(?=>)");

            _userName = name.Match(uid).ToString().Trim();
            _userId = userId.Match(uid).ToString();
            if (string.IsNullOrEmpty(_userName))
            {
                Regex rgx = new Regex(@"uid +");
                _userName = rgx.Replace(uid, "");
            }
            Regex rgx2 = new Regex(@"\[.*\] ");
            _userName = rgx2.Replace(_userName, "");
        }

    }
}
